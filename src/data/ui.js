export const uiData = [
  {
    name: "add",
    desc: "Add two values together",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 100,
  },
  {
    name: "subtract",
    desc: "Subtract two values",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 101,
  },
  {
    name: "multiply",
    desc: "Multiply two values",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 102,
  },
  {
    name: "divide",
    desc: "Divivde two values",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 103,
  },
  {
    name: "increment",
    desc: "Increment by 1",
    inputs: 1,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 104,
  },
  {
    name: "decrement",
    desc: "Decrement by 1",
    inputs: 1,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 105,
  },
  {
    name: "concatenate",
    desc: "Concatenate Strings with Plus Operator",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 106,
  },
  {
    name: "concatenatePlusEquals",
    desc: "Concatenate Strings with Plus Equals Operator",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 107,
  },
  {
    name: "findLength",
    desc: "Find the length of a string",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 108,
  },
  {
    name: "findFirstLetterOfString",
    desc: "Use Bracket Notation to find the first Character in a String",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 109,
  },
  {
    name: "findNthLetterOfString",
    desc: "Use Bracket Notation to find the Nth Character in a String",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 110,
  },
  {
    name: "getLastLetterOfString",
    desc: "Use Bracket Notation to find the Last Character in a String",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 111,
  },
  {
    name: "getNthToLastLetterOfString",
    desc: "Use Bracket Notation to find the Nth to Last Character in a String",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 112,
  },
  {
    name: "push",
    desc: "Manipulate Arrays with push ()",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 113,
  },
  {
    name: "pop",
    desc: "Manipulate Arrays with pop ()",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 114,
  },
  {
    name: "shift",
    desc: "Manipulate Arrays with shift ()",
    inputs: 2,
    type: "basic",
    typeNum: 100,
    isFavorite: false,
    order: 115,
  },
  {
    name: "countingCards",
    desc:
      "Enter a card value, this will keep track of your odds and help you make a better informed bet.",
    inputs: 1,
    type: "basic",
    typeNum: 200,
    isFavorite: false,
    order: 200,
  },
  {
    name: "lookUpProfile",
    desc:
      "Enter the name of someone in our database, and wether you want their likes or number.",
    inputs: 2,
    type: "basic",
    typeNum: 200,
    isFavorite: false,
    order: 201,
  },
  {
    name: "randomRange",
    desc:
      "Enter a max and a min, and this shows generates a random integer within that range.",
    inputs: 2,
    type: "basic",
    typeNum: 200,
    isFavorite: false,
    order: 202,
  },
  {
    name: "removeSplice",
    desc: "Enter an array and this will remove the first and last points.",
    inputs: 1,
    type: "basic",
    typeNum: 200,
    isFavorite: false,
    order: 203,
  },
  {
    name: "addItemSplice",
    desc:
      "Enter an array and this will insert a string telling you where the halfway mark is.",
    inputs: 3,
    type: "basic",
    typeNum: 200,
    isFavorite: false,
    order: 204,
  },
  {
    name: "checking",
    desc:
      "Enter an array and an element and this will search if its in the array.",
    inputs: 2,
    type: "basic",
    typeNum: 200,
    isFavorite: false,
    order: 205,
  },
  {
    name: "findTheType",
    desc: "Use type of to Check the Type of a Variable.",
    inputs: 1,
    type: "basic",
    typeNum: 200,
    isFavorite: false,
    order: 206,
  },
  {
    name: "popularRapMusic",
    desc:
      "Input artist, album, or genre to return a new array. Uses the map function",
    inputs: 1,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 300,
  },
  {
    name: "filterMethod",
    desc:
      "The filter() method returns an array containing elements of the parent array that match the set test. Returns all strings with a length > 6.",
    inputs: 0,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 301,
  },
  {
    name: "concatArr",
    desc: "array of input1 will be added to original array numberArray",
    inputs: 1,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 302,
  },
  {
    name: "splitArr",
    desc:
      'Split a string into an array of substrings. This function is set up to split at argument delimiter space ex(" ")',
    inputs: 1,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 303,
  },
  {
    name: "joinSSN",
    desc:
      "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.",
    inputs: 1,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 304,
  },
  {
    name: "everyPositive",
    desc:
      "Input an array of numbers, if all positve, it will return ture. If postive and negative, it returns false. If all negative it returns false. All elements must pass.",
    inputs: 1,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 305,
  },
  {
    name: "someMethod",
    desc:
      "Input an array of numbers, if any element is less than 10, it will return true. Every makes every element pass the requiremtns to be true, where some only requires one element to pass to be true.",
    inputs: 1,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 306,
  },
  {
    name: "includesMethod",
    desc:
      "Please input a pizza topping, make sure it is a string, and will return true if its the array or false if not.",
    inputs: 1,
    type: "Functional&Algorithm",
    typeNum: 300,
    isFavorite: false,
    order: 307,
  },
];
